services:
  db:
    image: postgres:17
    container_name: pokemon-db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=pokemon_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d pokemon_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: "1.5"
          memory: "2g"
    restart: unless-stopped

  api:
    build:
      context: .
      target: dev
    image: pokemon-api:dev
    container_name: pokemon-api
    env_file:
      - .env
    environment:
      - PORT=3000
      - NODE_ENV=development
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=pokemon_db
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
    command: npm run dev
    depends_on:
      db:
        condition: service_healthy
  
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pokemon-pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "5050:80"
    depends_on:
      - db

# Para produção, podemos usar o target 'prod' depois (fora deste escopo)

volumes:
  postgres_data:
